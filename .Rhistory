head(y)
head(g)
head(g<0)
head(y*g<0)
head(y)
head(g<0)
head(y*g<0)
head(y)
head(g)
head(g<0)
head(y*g<0)
head(predict(fit,x_train)[,2]>0.5)
head(predict(fit,x)[,2]>0.5)
head(predict(fit,x)[,2])
-1+2*(predict(fit,x)[,2]>.5)
head(-1+2*(predict(fit,x)[,2]>.5))
fit
str(fit)
temp<-predict(fit,x_train)[,2]
temp<-predict(fit,x)[,2]
head(temp)
str(temp)
?predict
head(y)
head(g)
head(y*g<0)
head((y*g)<0)
head(w*(y*g<0))
sum(w*(y*g<0))
( (1-e) / e )
log ( (1-e) / e )
.5*log ( (1-e) / e )
alpha*g_test
alpha*g
head(alpha*g)
head(f)
f+alpha*g
head(f+alpha*g)
.0.5*log((1-.5)/.5)
0.5*log((1-.5)/.5)
0.5*log((1-.1)/.1)
head(w)
head(w_test)
setwd("./data")
train<-read.csv("sonar_train.csv",header=FALSE)
test<-read.csv("sonar_test.csv",header=FALSE)
setwd("../")
y<-train[,61]
x<-train[,1:60]
y_test<-test[,61]
x_test<-test[,1:60]
iter=50
train_error<-rep(0,iter) # Keep track of errors
test_error<-rep(0,iter)
f<-rep(0,130) # 130 pts in training data
f_test<-rep(0,78) # 78 pts in test data
sumW<-rep(0,iter)
sumW_test<-rep(0,iter)
sumWnorm<-rep(0,iter)
sumWnorm_test<-rep(0,iter)
i<-1
w<-exp(-y*f) # This is a shortcut to compute w
sumW[i]<-sum(w)
w
sumW
w_test<-exp(-y_test*f_test)
sumW_test[i]<-sum(w_test)
w_test
sumW_test
w<-w/sum(w)
sumWnorm[i]<-sum(w)
w_test<-w_test/sum(w_test)
sumWnorm_test[i]<-sum(w_test)
w
sumWnorm
w_test
sumWnorm_test
fit<-rpart(y~.,x,w,method="class")
g<--1+2*(predict(fit,x)[,2]>.5) # make -1 or 1
g_test<--1+2*(predict(fit,x_test)[,2]>.5)
g
g_test
e<-sum(w*(y*g<0))
e
alpha<-.5*log ( (1-e) / e )
alpha
f<-f+alpha*g
f
f_test<-f_test+alpha*g_test
f_test
train_error[i]<-sum(1*f*y<0)/130
train_error
test_error[i]<-sum(1*f_test*y_test<0)/78
test_error
i<-i+1
w<-exp(-y*f) # This is a shortcut to compute w
sumW[i]<-sum(w)
w
w_test<-exp(-y_test*f_test)
sumW_test[i]<-sum(w_test)
sumW
w_test
sumW_test
y
w<-w/sum(w)
sumWnorm[i]<-sum(w)
w
sumWnorm
w_test<-w_test/sum(w_test)
sumWnorm_test[i]<-sum(w_test)
w_test
wumWnorm
sumWnorm
fit<-rpart(y~.,x,w,method="class")
g<--1+2*(predict(fit,x)[,2]>.5) # make -1 or 1
g_test<--1+2*(predict(fit,x_test)[,2]>.5)
sum(f)
sum(f_test)
head(f)
e<-sum(w*(y*g<0))
e
alpha<-.5*log ( (1-e) / e )
alpha
f<-f+alpha*g
f
f_test<-f_test+alpha*g_test
f_test
train_error[i]<-sum(1*f*y<0)/130
test_error[i]<-sum(1*f_test*y_test<0)/78
train_error
test_error
i<-i+1
}
w<-exp(-y*f) # This is a shortcut to compute w
sumW[i]<-sum(w)
head(w)
sumW
w_test<-exp(-y_test*f_test)
sumW_test[i]<-sum(w_test)
head(w_test)
sumW_test
sum(f)
sum(f_test)
w<-w/sum(w)
sumWnorm[i]<-sum(w)
head(w)
sumWnorm
w_test<-w_test/sum(w_test)
sumWnorm_test[i]<-sum(w_test)
head(w_test)
sumWNorm
sumWnorm
sumWnorm_test
fit<-rpart(y~.,x,w,method="class")
g<--1+2*(predict(fit,x)[,2]>.5) # make -1 or 1
g_test<--1+2*(predict(fit,x_test)[,2]>.5)
e<-sum(w*(y*g<0))
e
alpha<-.5*log ( (1-e) / e )
alpha
f<-f+alpha*g
f_test<-f_test+alpha*g_test
head(f)
head(f_test)
sum(f)
sum(f_test)
train_error[i]<-sum(1*f*y<0)/130
test_error[i]<-sum(1*f_test*y_test<0)/78
train_error
test_error
i<-i+1
w<-exp(-y*f) # This is a shortcut to compute w
sumW[i]<-sum(w)
w_test<-exp(-y_test*f_test)
sumW_test[i]<-sum(w_test)
head(w)
sumW
head(w_test)
sum(w_test)
alpha<-0.1*(.5*log ( (1-e) / e ))
print(which.min(test_error))
print(min(test_error))
print(which.min(test_error))
?main
?plot
setwd("./data")
exams<-read.csv("exams_and_names-2.csv",header=FALSE)
setwd("../")
getwd()
setwd("./data")
exams<-read.csv("exams_and_names-2.csv",header=FALSE)
setwd("../")
hist(exams)
head(exams)
setwd("./data")
exams<-read.csv("exams_and_names-2.csv",header=T)
setwd("../")
head(examps)
head(exams)
with(exams,plot(Exam.1~Exam.2))
abline(0,1)
par(mfrow=c(1,2))
with(exams,boxplot(Exam.1))
with(exams,boxplot(Exam.2))
sd1<-sd(exams$Exam.1)
sd2<-sd(exams$Exam.2)
exams$Exam.1.z<-exams$Exam.1/sd1
exams$Exam.1.z<-exams$Exam.2/sd2
head(exams)
sd1
sd2
?sd
sd2<-sd(exams$Exam.2,na.rm=F)
sd2
sum(is.na(exams$Exam.2))
sum(is.na(exams$Exam.1))
exams$Exam.2[is.na(exams$Exam.2)]<-0
sum(is.na(exams$Exam.2))
sd2<-sd(exams$Exam.2,na.rm=F)
sd2
sd1
sd1<-sd(exams$Exam.1)
sd2<-sd(exams$Exam.2,na.rm=F)
exams$Exam.1.z<-exams$Exam.1/sd1
exams$Exam.2.z<-exams$Exam.2/sd2
exams$Exam.1.z>3
head(exams)
exams$Exam.1.z<-(exams$Exam.1-mean(exams.Exam.1))/sd1
exams$Exam.1.z<-(exams$Exam.1-mean(exams$Exam.1))/sd1
head(exams)
sd1<-sd(exams$Exam.1)
sd2<-sd(exams$Exam.2,na.rm=F)
exams$Exam.1.z<-(exams$Exam.1-mean(exams$Exam.1))/sd1
exams$Exam.2.z<-(exams$Exam.2-mean(exams$Exam.2))/sd2
exams$Exam.1.scale<-scale(exams$Exam.1)
exams$Exam.2.scale<-scale(exams$Exam.2)
head(exams)
with(exams,Exam.1.z>=3 | <=-3)
with(exams,Exam.1.z>=3 | Exam.1.z<=-3)
with(exams,Exam.2.z>=3 | Exam.1.z<=-3)
sd1
sd2
sd(Exam.1)
sd(exams$Exam.1)
sd(exams$Exam.2)
exams<-read.csv("exams_and_names-2.csv",header=T)
setwd("./data")
exams<-read.csv("exams_and_names-2.csv",header=T)
setwd("../")
sd1<-sd(exams$Exam.1,na.rm=T)
sd2<-sd(exams$Exam.2,na.rm=T)
exams$Exam.1.z<-(exams$Exam.1-mean(exams$Exam.1))/sd1
exams$Exam.2.z<-(exams$Exam.2-mean(exams$Exam.2))/sd2
exams$Exam.1.scale<-scale(exams$Exam.1)
exams$Exam.2.scale<-scale(exams$Exam.2)
sd1
sd2
head(exams)
sd1<-sd(exams$Exam.1,na.rm=T)
sd2<-sd(exams$Exam.2,na.rm=T)
exams$Exam.1.z<-(exams$Exam.1-mean(exams$Exam.1,na.rm=T))/sd1
exams$Exam.2.z<-(exams$Exam.2-mean(exams$Exam.2,na.rm=T))/sd2
exams$Exam.1.scale<-scale(exams$Exam.1)
exams$Exam.2.scale<-scale(exams$Exam.2)
head(exams)
head(sort(exams[exams$Exam2.z,]))
head(sort(exams[exams$Exam.2.z,]))
head(sort(exams$Exam.2.z))
?sort
head(sort(exams$Exam.2.z))
head(sort(exams$Exam.2.z,decreasing=T))
with(exams,boxplot(Exam.1))
with(exams,boxplot(Exam.2))
?quantile
quantile(exams$Exam.1)
1q<-quantiles(exams,0.25,rm=T)
1q<-quantile(exams,0.25,rm=T)
1q<-quantile(exams,0.25,na.rm=T)
1q<-quantile(exams,0.25,na.rm=T)
1q<-quantile(exams$Exam.2,0.25,na.rm=T)
quantile(exams$Exam.2)
quantile(exams$Exam.2,na.rm=T)
quantile(exams$Exam.2,0.25,na.rm=T)
q1<-quantile(exams$Exam.2,0.25,na.rm=T)
1q<-quantile(exams$Exam.2,0.25,na.rm=T)
q1<-quantile(exams$Exam.2,0.25,na.rm=T)
q3<-quantile(exams$Exam.2,0.75,na.rm=T)
q1
outliers<-exams[exams$Exam.2<=q1 | exams$exam.2<=q3,]
outliers
outliers<-exams[exams$Exam.2<=q1 | exams$Exam.2<=q3,]
outliers
outliers<-exams[exams$Exam.2<=q1 | exams$Exam.2>=q3,]
outliers
q3
q1<-quantile(exams$Exam.2,0.25,na.rm=T)
q3<-quantile(exams$Exam.2,0.75,na.rm=T)
iqr<-q3-q1
outliers<-exams[exams$Exam.2>=q3+(1.5*iqr) | exams$Exam.2<-q1-(1.5*IQR)]
outliers
with(exams,boxplot(Exam.2)) # three outliers
q3
iqr
1.5*iqr
q3+(1.5*iqr)
q1-(1.5*iqr)
outliers<-exams[exams$Exam.2>=q3+(1.5*iqr) | exams$Exam.2<-q1-(1.5*IQR),]
outliers<-exams[exams$Exam.2>=q3+(1.5*iqr) | exams$Exam.2<-q1-(1.5*iqr),]
outliers<-exams[exams$Exam.2>=q3+(1.5*iqr) | exams$Exam.2<=q1-(1.5*iqr),]
outliers
sd1<-sd(exams$Exam.1,na.rm=T)
sd2<-sd(exams$Exam.2,na.rm=T)
exams$Exam.1.z<-(exams$Exam.1-mean(exams$Exam.1,na.rm=T))/sd1
exams$Exam.2.z<-(exams$Exam.2-mean(exams$Exam.2,na.rm=T))/sd2
# Note: default for scale is to set na.rm=T
exams$Exam.1.scale<-scale(exams$Exam.1)
exams$Exam.2.scale<-scale(exams$Exam.2)
head(sort(exams$Exam.2.z))
head(sort(exams$Exam.2.z,decreasing=T))
head(sort(exams[exams$Exam.2.z,]))
head(sort(exams[exams$Exam.2.z]))
?sort
head(exams[sort(exams$Exam.2.z),)
head(exams[sort(exams$Exam.2.z),])
head(sort(exams$Exam.2.z,decreasing=T))
head(sort(exams$Exam.2.z))
head(sort(exams$Exam.2.z,decreasing=T))
boxplot(exams$Exam.1,exams$Exam.2,col="blue",main="Exam Scores",names=c("exam1", "exam2"),ylab="Exam Score")
data<-c(1,2,3,4,100)
boxplot(data)
sd3<-sd(data)
mean1<-mean(data)
zscored<-(data-mean1)/sd3
zscores<-(data-mean1)/sd3
zscores
mean1
boxplot(rt(50,1))
boxplot(rt(50,df=1))
fit<-lm(exams$Exam.1~exams$Exam.2)
summary(fit)
str(fit)
fit<-lm(exams$Exam.2~exams$Exam.1)
summary(fit)
fit$residuals
plot(seq(1,40),fit$residuals)
dim(fit$residuals)
length(fit$residuals)
plot(seq(1,37),fit$residuals)
fit<-lm(exams$Exam.2~exams$Exam.1)
summary(fit)
plot(exams.Exam.1,exams.Exam.2,pch=19,xlab="Exam 1", ylab="Exam 2", xlim=c(100,200),
ylim=c(100,200))
abline(fit)
sort(fit$residuals)
fit<-lm(exams$Exam.2~exams$Exam.1)
summary(fit)
plot(exams$Exam.1,exams$Exam.2,pch=19,xlab="Exam 1", ylab="Exam 2", xlim=c(100,200),
ylim=c(100,200))
abline(fit)
sort(fit$residuals)
par(mfrow=c(1,1))
plot(exams$Exam.1,exams$Exam.2,pch=19,xlab="Exam 1", ylab="Exam 2", xlim=c(100,200),
ylim=c(100,200))
abline(fit)
sort(fit$residuals)
# load/clean data
setwd("./data")
exams<-read.csv("exams_and_names-2.csv",header=T)
setwd("../")
exams<-!is.na(exams)
# fit model
fit<-lm(exams$Exam.2~exams$Exam.1)
summary(fit)
# plot results
plot(exams$Exam.1,exams$Exam.2,pch=19,xlab="Exam 1", ylab="Exam 2", xlim=c(100,200),
ylim=c(100,200))
abline(fit)
# inspect residuals
sort(fit$residuals)
# recall that residuals are the **vertical** distance to the regression (fitted values) line.
# fit model
fit2<-lm(exams$Exam.2~exams$Exam.1)
# plot results
plot(exams$Exam.1,exams$Exam.2,pch=19,xlab="Exam 1", ylab="Exam 2", xlim=c(100,200),
ylim=c(100,200),cex=abs(fit2$residuals)/10)
abline(fit2)
fit2<-lm(exams$Exam.2~exams$Exam.1)
fit<-lm(exams$Exam.2~exams$Exam.1)
head(exams)
exams1<-exams[!is.na(exams[,3]),]
# fit model
fit2<-lm(exams1$Exam.2~exams1$Exam.1)
exams1<-exams[!is.na(exams[,3]),]
exams1
exams1<-exams[!is.na(exams[,3]),]
exams1
head(exams)
exams<-read.csv("exams_and_names-2.csv",header=T)
setwd("./data")
exams<-read.csv("exams_and_names-2.csv",header=T)
setwd("../")
exams1<-exams[!is.na(exams[,3]),]
exams1
fit<-lm(exams$Exam.2~exams$Exam.1)
summary(fit)
# plot results
plot(exams$Exam.1,exams$Exam.2,pch=19,xlab="Exam 1", ylab="Exam 2", xlim=c(100,200),
ylim=c(100,200))
abline(fit)
# inspect residuals
sort(fit$residuals)
fit2<-lm(exams1$Exam.2~exams1$Exam.1)
# plot results
plot(exams$Exam.1,exams$Exam.2,pch=19,xlab="Exam 1", ylab="Exam 2", xlim=c(100,200),
ylim=c(100,200),cex=abs(fit2$residuals)/10)
abline(fit2)
fit2<-lm(exams1$Exam.2~exams1$Exam.1)
# plot results
plot(exams$Exam.1,exams$Exam.2,pch=19,xlab="Exam 1", ylab="Exam 2", xlim=c(100,200),
ylim=c(100,200),cex=abs(fit2$residuals)/10)
# load/clean data
setwd("./data")
exams<-read.csv("exams_and_names-2.csv",header=T)
setwd("../")
exams1<-exams[!is.na(exams[,3]),]
# fit model
fit2<-lm(exams1$Exam.2~exams1$Exam.1)
# plot results
plot(exams$Exam.1,exams$Exam.2,pch=19,xlab="Exam 1", ylab="Exam 2", xlim=c(100,200),
ylim=c(100,200),cex=abs(fit2$residuals)/10)
setwd("./data")
exams<-read.csv("exams_and_names-2.csv",header=T)
setwd("../")
exams1<-exams[!is.na(exams[,3]),]
# fit model
fit2<-lm(exams1$Exam.2~exams1$Exam.1)
# plot results
plot(exams$Exam.1,exams$Exam.2,pch=19,xlab="Exam 1", ylab="Exam 2", xlim=c(100,200),
ylim=c(100,200),cex=abs(fit2$residuals)/10)
abline(fit2)
plot(fit2)
setwd("./data")
data<-read.csv("exams_and_names-2.csv",header=T)
setwd("../")
x<-data[!is.na(data[,3]),]
x<-data[!is.na(data[,3]),2:3]
plot(x[,2],x[,1],pch=19,xlab="Exam 1", ylab="Exam 2", xlim=c(100,200),
ylim=c(100,200))
fit<-kmeans(x,5)
summary(fit)
points(fit$centers,pch=19,col="blue",cex=2)
points(x,col=fit$cluster,pch=19)
setwd("./data")
data<-read.csv("exams_and_names-2.csv",header=T)
setwd("../")
# clean data taking only needed rows
x<-data[!is.na(data[,3]),2:3]
# plot the data
plot(x[,2],x[,1],pch=19,xlab="Exam 1", ylab="Exam 2", xlim=c(100,200),
ylim=c(100,200))
# fit model
fit<-kmeans(x,5)
summary(fit)
# plot results
points(fit$centers,pch=19,col="blue",cex=2)
points(x,col=fit$cluster,pch=19)
# load data
setwd("./data")
data<-read.csv("exams_and_names-2.csv",header=T)
setwd("../")
# clean data taking only needed rows
x<-data[!is.na(data[,3]),2:3]
# plot the data
plot(x[,2],x[,1],pch=19,xlab="Exam 1", ylab="Exam 2")
# fit model
fit<-kmeans(x,5)
summary(fit)
# plot results
points(fit$centers,pch=19,col="blue",cex=2)
points(x,col=fit$cluster,pch=19)
plot(x,pch=19,xlab="Exam 1", ylab="Exam 2")
# fit model
fit<-kmeans(x,5)
points(fit$centers,pch=19,col="blue",cex=2)
points(x,col=fit$cluster,pch=19)
plot(x,pch=19,xlab="Exam 1", ylab="Exam 2")
# fit model
fit<-kmeans(x,6)
# plot results
points(fit$centers,pch=19,col="blue",cex=2)
points(x,col=fit$cluster,pch=19)
plot(x,pch=19,xlab="Exam 1", ylab="Exam 2")
# fit model
fit<-kmeans(x,2)
# plot results
points(fit$centers,pch=19,col="blue",cex=2)
points(x,col=fit$cluster,pch=19)
plot(x,pch=19,xlab="Exam 1", ylab="Exam 2")
# fit model
fit<-kmeans(x,3)
# plot results
points(fit$centers,pch=19,col="blue",cex=2)
points(x,col=fit$cluster,pch=19)
plot(x,pch=19,xlab="Exam 1", ylab="Exam 2")
# fit model
fit<-kmeans(x,4)
# plot results
points(fit$centers,pch=19,col="blue",cex=2)
points(x,col=fit$cluster,pch=19)
17/81
?cex
?plot
